import argparse
import glob
import os
from collections import defaultdict

import csv


def load_rows(paths):
    rows = []
    for p in paths:
        try:
            with open(p, "r", encoding="utf-8") as f:
                r = csv.DictReader(f)
                for row in r:
                    rows.append(row)
        except FileNotFoundError:
            continue
    return rows


def to_float(x, default=None):
    try:
        return float(x)
    except Exception:
        return default


def main():
    ap = argparse.ArgumentParser(description="Build LaTeX tables from grid_summary.csv files.")
    ap.add_argument("--glob", default="results/pub_grid_s*/grid_summary.csv",
                    help="Glob for per-seed CSV summaries")
    ap.add_argument("--out", default="tables/qf_amplification_by_rho.tex",
                    help="Output LaTeX file path")
    ap.add_argument("--size", type=int, default=200000,
                    help="Use rows with n_pos == n_neg == SIZE for table")
    args = ap.parse_args()

    paths = glob.glob(args.glob)
    if not paths:
        raise SystemExit(f"No CSVs found for glob: {args.glob}")

    rows = load_rows(paths)
    # aggregate amplification by rho, sigma for chosen size
    agg = defaultdict(list)
    sigmas = set()
    rhos = set()
    for row in rows:
        n_pos = int(float(row.get("n_pos", 0)))
        n_neg = int(float(row.get("n_neg", 0)))
        if n_pos != args.size or n_neg != args.size:
            continue
        rho = to_float(row.get("rho"))
        sigma = to_float(row.get("sigma_eps"))
        amp = to_float(row.get("amplification"))
        if rho is None or sigma is None or amp is None:
            continue
        agg[(rho, sigma)].append(amp)
        sigmas.add(sigma)
        rhos.add(rho)

    sigmas = sorted(sigmas)
    rhos = sorted(rhos)

    # Prepare LaTeX table directory
    out_dir = os.path.dirname(args.out)
    if out_dir and not os.path.exists(out_dir):
        os.makedirs(out_dir, exist_ok=True)

    with open(args.out, "w", encoding="utf-8") as f:
        f.write("% Auto-generated by scripts/make_qf_tables.py\n")
        f.write("\\begin{table}[htbp]\n")
        f.write("\\centering\n")
        f.write("\\caption{Amplification (AUC$_{comp}$ - max AUC$_{single}$) by $\\rho$ and noise $\\sigma$ (balanced samples). Mean across seeds; size=%d per class.}\\\n" % args.size)
        f.write("\\label{tab:qf-amp-by-rho}\n")
        # header
        cols = "l" + "c" * len(sigmas)
        f.write(f"\\begin{{tabular}}{{{cols}}}\n")
        f.write("\\hline\\hline\n")
        header = ["$\\rho$"] + [f"$\\sigma={s:.1f}$" for s in sigmas]
        f.write(" ".join([h if i == 0 else "& " + h for i, h in enumerate(header)]) + " \\\\\n")
        f.write("\\hline\n")
        # rows
        for rho in rhos:
            row_vals = [f"{rho:+.1f}"]
            for s in sigmas:
                vals = agg.get((rho, s), [])
                if vals:
                    m = sum(vals) / len(vals)
                    # std across seeds
                    if len(vals) > 1:
                        mean = m
                        var = sum((v - mean) ** 2 for v in vals) / (len(vals) - 1)
                        sd = var ** 0.5
                        cell = f"{m:.4f} ({sd:.4f})"
                    else:
                        cell = f"{m:.4f}"
                else:
                    cell = "--"
                row_vals.append(cell)
            f.write(" ".join([row_vals[0]] + ["& " + v for v in row_vals[1:]]) + " \\\\\n")
        f.write("\\hline\\hline\n")
        f.write("\\end{tabular}\n")
        f.write("\\end{table}\n")

    print(f"Wrote LaTeX table to: {args.out}")


if __name__ == "__main__":
    main()

